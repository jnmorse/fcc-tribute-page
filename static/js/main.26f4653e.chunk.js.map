{"version":3,"sources":["components/SiteHeader.js","components/Header-Image.js","components/Fig-Caption.js","App.js","serviceWorker.js","index.js"],"names":["SiteHeader","_ref","title","subTitle","children","react_default","a","createElement","id","style","width","textAlign","showSubtitle","HeaderImage","src","alt","FigCaption","className","App","IEEE","Fragment","marginTop","SiteHeader_SiteHeader","components_Header_Image","margin","cite","minWidth","overflowX","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAYe,SAASA,EAATC,GAAmD,IAA7BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,SACpD,OACEC,EAAAC,EAAAC,cAAA,UAAQC,GAAG,cAAcC,MAAO,CAAEC,MAAO,UACvCL,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEE,UAAW,UAAYH,GAAG,SAASN,GAXtD,SAAsBC,GACpB,OAAIA,EACKE,EAAAC,EAAAC,cAAA,KAAGC,GAAG,wBAAwBL,GAGhC,KAOFS,CAAaT,GACbC,aCNQS,EAPK,SAAAZ,GAAA,IAAGa,EAAHb,EAAGa,IAAKC,EAARd,EAAQc,IAAKX,EAAbH,EAAaG,SAAb,OAClBC,EAAAC,EAAAC,cAAA,UAAQC,GAAG,WACTH,EAAAC,EAAAC,cAAA,OAAKO,IAAKA,EAAKC,IAAKA,EAAKP,GAAG,UAC3BJ,UCHU,SAASY,EAATf,GAAkC,IAAZG,EAAYH,EAAZG,SACnC,OACEC,EAAAC,EAAAC,cAAA,cAAYC,GAAG,cAAcS,UAAU,eACrCZ,EAAAC,EAAAC,cAAA,UAAKH,QC+GIc,mLA9GX,IACMC,EAAOd,EAAAC,EAAAC,cAAA,QAAML,MAAM,oDAAZ,QAEb,OACEG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACEf,EAAAC,EAAAC,cAAA,QAAMC,GAAG,OAAOC,MAAO,CAAEY,UAAW,KAClChB,EAAAC,EAAAC,cAACe,EAAD,CAAYpB,MAAM,iBAAiBC,SAAS,oCAC1CE,EAAAC,EAAAC,cAACgB,EAAD,CACET,IAAI,sJAEJT,EAAAC,EAAAC,cAACS,EAAD,mFAIJX,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAeC,MAAO,CAAEe,OAAQ,aACtCnB,EAAAC,EAAAC,cAAA,cAAYkB,KAAK,gDACfpB,EAAAC,EAAAC,cAAA,+LASFF,EAAAC,EAAAC,cAAA,cAAYkB,KAzBA,uEAyBmBhB,MAAO,CAAEiB,SAAU,IAAKC,UAAW,SAChEtB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qBAIJF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAK,MAELF,EAAAC,EAAAC,cAAA,UACGY,EACA,4CAGHd,EAAAC,EAAAC,cAAA,UACGY,EADH,ujBAaFd,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAK,MAELF,EAAAC,EAAAC,cAAA,UACGY,EADH,2BAKAd,EAAAC,EAAAC,cAAA,6OAMGY,EANH,sNAYGA,EAZH,kjBA6BVd,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,wGAGEF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,eAAeoB,KAAK,+CAA+CC,OAAO,SAASC,IAAI,uBAA7F,mBAHF,eAlGMC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.26f4653e.chunk.js","sourcesContent":["import React from 'react'\n\nimport './SiteHeader.css'\n\nfunction showSubtitle(subTitle) {\n  if (subTitle) {\n    return <p id=\"site-header_subtitle\">{subTitle}</p>\n  }\n\n  return null\n}\n\nexport default function SiteHeader({ title, subTitle, children }) {\n  return(\n    <header id=\"site-header\" style={{ width: '100vw' }}>\n      <h1 style={{ textAlign: 'center' }} id=\"title\">{title}</h1>\n      {showSubtitle(subTitle)}\n      {children}\n    </header>\n  )\n}\n","import React from 'react'\n\nimport './Header-Image.css'\n\nconst HeaderImage = ({ src, alt, children }) => (\n  <figure id=\"img-div\">\n    <img src={src} alt={alt} id=\"image\" />\n    {children}\n  </figure>\n)\n\nexport default HeaderImage\n","import React from 'react'\n\nimport './Fig-Caption.css'\n\nexport default function FigCaption({ children }) {\n  return (\n    <figcaption id=\"img-caption\" className=\"Fig-Caption\">\n      <em>{children}</em>\n    </figcaption>\n  )\n}\n","import React, { Component } from 'react';\n\nimport SiteHeader from './components/SiteHeader'\nimport HeaderImage from './components/Header-Image'\nimport FigCaption from './components/Fig-Caption'\n\nclass App extends Component {\n  render() {\n    const awardSource = 'https://en.wikipedia.org/wiki/Linus_Torvalds#Awards_and_achievements'\n    const IEEE = <abbr title=\"Institue of Electrical and Electronics Engineers\">IEEE</abbr>\n\n    return (\n      <>\n        <main id=\"main\" style={{ marginTop: 60 }}>\n          <SiteHeader title=\"Linus Torvalds\" subTitle=\"Person who made the Linux Kernel\">\n            <HeaderImage\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Linus-Torvalds_IEEE_Ibuka_Award_2018.jpg/1920px-Linus-Torvalds_IEEE_Ibuka_Award_2018.jpg\"\n            >\n              <FigCaption>Linus Torvalds receiving 2018 IEEE Masaru Ibuka Consumer Electrons Award</FigCaption>\n            </HeaderImage>\n          </SiteHeader>\n\n          <div id=\"tribute-info\" style={{ margin: '0 1.5rem' }}>\n            <blockquote cite=\"https://en.wikipedia.org/wiki/Linus_Torvalds\">\n              <p>\n                {`\n                  The first prototypes of Linux were publicly released later\n                  that year (1991). Version 1.0 was released on March 14, 1994.\n                `}\n              </p>\n            </blockquote>\n\n\n            <blockquote cite={awardSource} style={{ minWidth: 750, overflowX: 'auto' }}>\n              <table>\n                <caption>Awards and Achievements</caption>\n                <thead>\n                  <tr>\n                    <th>year</th>\n                    <th>Award</th>\n                    <th>Notes</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  <tr>\n                    <td>{2018}</td>\n\n                    <td>\n                      {IEEE}\n                      {' Masaru Ibuka Consumer Electronics Award'}\n                    </td>\n\n                    <td>\n                      {IEEE}\n                      {` Masaru Ibuka Consumer Electronics Award is\n                        conferred by the Institute of Electrical and Electronics\n                        Engineers for outstanding contributions to consumer\n                        electronics technology has been named in honor the\n                        co-founder and honorary chairman of Sony Corporation,\n                        Masaru Ibuka. 2018 Ibuka award was conferred to Linus\n                        Torvalds \"For his leadership of the development and\n                        proliferation of Linux `}\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td>{2014}</td>\n\n                    <td>\n                      {IEEE}\n                      {` Computer Pioneer Award`}\n                    </td>\n\n                    <td>\n                      {`\n                          On April 23, 2014, the Institute of Electrical and\n                          Electronics Engineers named Torvalds as the 2014\n                          recipient of the\n                        `}\n                      {IEEE}\n                      {`\n                           Computer Society's Computer Pioneer Award. The\n                           Computer Pioneer Award was established in 1981 by\n                           the\n                        `}\n                      {IEEE}\n                      {`\n                           Computer Society Board of Governors to\n                           recognize and honor the vision of those whose\n                           efforts resulted in the creation and continued\n                           vitality of the computer industry. The award is\n                           presented to outstanding individuals whose main\n                           contribution to the concepts and development of the\n                           computer field was made at least 15 years earlier.\n                        `}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </blockquote>\n          </div>\n\n          <footer>\n            <p>\n              {`If you have time, you should read more about this incredible\n              person on their `}\n              <a id=\"tribute-link\" href=\"https://en.wikipedia.org/wiki/Linus_Torvalds\" target=\"_blank\" rel=\"noreferrer noopener\">\n                Wikipedia entry\n              </a>.\n            </p>\n          </footer>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}